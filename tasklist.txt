    float leftNumberOfVehicles;
        *pLeftCarAdded
    float leftAverageWaitingTime;
    float leftMaxWaitingTime;
    float leftClearanceTime;
        *pLeftClearanceTime

    float rightNumberOfVehicles;
        *pRightCarAdded
        
    float rightAverageWaitingTime;
    float rightMaxWaitingTime;

    float rightClearanceTime;
        *pRightClearanceTime










# # useful code reminders

    // Compile code using GSL
gcc -ansi -c main.c -o main.o

    // Link compiled object with library
gcc main.o -lgsl -lgslcblas -o main


    
                 ///* Using pointers to change values of variables:
    int num = 1;
    int *pointerNum = &num;
    printf("Num: %d      Pointer: %d \n" , num, *pointerNum);
    *pointerNum = 5;
    printf("Num: %d      Pointer: %d \n" , num, *pointerNum);

                */




    // // Print top of both queues
    display(leftQueue->front);
    display(rightQueue->front);

    //stack element
    enqueue(rightQueue, 1);

    //Dequeue 
    dequeue(leftQueue);



/* GSL random number generator */
float keithRandom() {

    /* Random number function based on the GNU Scientific Library */
    /* Returns a random float between 0 and 1, exclusive; e.g., (0,1) */
    const gsl_rng_type * T;
    gsl_rng * r;
    gsl_rng_env_setup();

    /* Seed generation based on time */
    struct timeval tv; 
    gettimeofday(&tv,0);
    unsigned long mySeed = tv.tv_sec + tv.tv_usec;

    /* Generator setup */
    T = gsl_rng_default; 
    r = gsl_rng_alloc (T);
    gsl_rng_set(r, mySeed);

    /* Generate it! */
    double u = gsl_rng_uniform(r); 
    gsl_rng_free (r);
    return (float)u;
}

